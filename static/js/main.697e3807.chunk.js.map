{"version":3,"sources":["SVGRenderer.tsx","hooks/useInterval.ts","Room.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Polygon","vertices","body","points","map","x","y","join","Circle","cx","position","cy","fill","render","fillStyle","r","circleRadius","SVGRenderer","engine","setRenderCount","React","useState","useEffect","stop","requestAnimationFrame","animate","i","viewBox","world","bodies","key","id","useInterval","fn","milliseconds","deps","interval","setInterval","clearInterval","random","min","max","Matter","Common","generateCircle","Bodies","circle","Math","currentUrl","URL","window","location","href","Room","setPopulation","undefined","setEngine","circles","R","sizeString","searchParams","get","size","parseInt","isNaN","getPopulationSizeOrDefault","people","infected","person","Engine","create","gravity","World","add","rectangle","isStatic","Events","on","event","population","pairs","forEach","pair","bodyA","bodyB","personA","personB","run","list","choose","Body","applyForce","className","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.697e3807.chunk.js","sourcesContent":["import React from 'react'\nimport { Body, Engine } from 'matter-js'\n\ninterface Props {\n  engine: Engine | undefined\n}\n\nconst verticesToPoints = (vertices: Matter.Vector[]) => (\n  vertices.map(({x, y}) => `${x},${y}`).join(' ')\n)\n\nconst Polygon = ({ body }: { body: Body }) => (\n  <polygon points={verticesToPoints(body.vertices)} />\n)\n\nconst Circle = ({ body }: { body: Body }) => (\n  <circle \n    cx={body.position.x} \n    cy={body.position.y} \n    fill={body.render.fillStyle} \n    r={body.circleRadius}  \n  />\n)\n\nconst SVGRenderer = ({ engine }: Props) => {\n  const setRenderCount = React.useState(0)[1]\n\n  React.useEffect(() => {\n    let stop = false\n    const animate = () => {\n      if (stop) return\n\n      setRenderCount(i => i + 1) // rerender\n      requestAnimationFrame(animate)\n    }\n    requestAnimationFrame(animate)\n\n    return () => { stop = true }\n  }, [setRenderCount])\n\n  if (!engine) return null\n\n  return <svg viewBox=\"0 0 800 600\">\n    {engine.world.bodies.map(body => body.circleRadius ? <Circle key={body.id} body={body} /> : <Polygon key={body.id} body={body} />)}\n  </svg>\n}\n\nexport default SVGRenderer","import React from 'react'\n\nconst useInterval = (fn: () => any, milliseconds: number, deps: any[] = []) => {\n  React.useEffect(() => {\n    const interval = setInterval(fn, milliseconds)\n    return () => clearInterval(interval)\n  // eslint-disable-next-line\n  }, [fn, milliseconds, ...deps])\n}\n\nexport default useInterval","import React from 'react'\nimport * as R from 'ramda'\nimport { Engine, World, Bodies, Body, Events } from 'matter-js'\nimport Matter from 'matter-js'\nimport SVGRenderer from './SVGRenderer'\nimport useInterval from './hooks/useInterval'\n\ninterface Person {\n  infected: boolean;\n  id: number | undefined;\n}\n\ninterface Population {\n  [key: number]: Person;\n}\n\n//don't worry about it\nconst random = (min: number, max: number): number => (Matter as any).Common.random(min, max)\nconst choose: <T> (list: T[] | undefined) => T | undefined = (list) => {\n  if (R.isNil(list)) return\n  return (Matter as any).Common.choose(list)\n}\n\nconst generateCircle = () => (\n  Bodies.circle(random(0, 800), random(0, 600), 5, { \n    render: { \n      fillStyle: Math.random() < 0.02 ? 'red' : 'green'\n    }\n  })\n) \n\nconst currentUrl = new URL(window.location.href)\nconst getPopulationSizeOrDefault = () => {\n  const defaultSize = 1000\n\n  const sizeString = currentUrl.searchParams.get('populationSize')\n  if (!sizeString) return defaultSize\n\n  const size = parseInt(sizeString, 10)\n  if (isNaN(size)) return defaultSize\n\n  return size\n}\n\nconst Room = () => {\n  const setPopulation = React.useState<Population>({})[1]\n  const [engine, setEngine] = React.useState<Engine | undefined>(undefined)\n\n  React.useEffect(() => {\n    const circles: Body[] = R.times(generateCircle, getPopulationSizeOrDefault()) \n    const people = circles.map(({ id, render: { fillStyle } }) => ({ \n      id, \n      infected: fillStyle === 'red' \n    }))\n\n    setPopulation(R.indexBy(person => `${person.id}`, people))\n\n    const engine = Engine.create()\n    engine.world.gravity.y = 0\n    World.add(engine.world, circles)\n\n    // walls\n    World.add(engine.world, [\n      Bodies.rectangle(400, 0, 800, 10, { isStatic: true }),\n      Bodies.rectangle(400, 600, 800, 10, { isStatic: true }),\n      Bodies.rectangle(800, 300, 10, 600, { isStatic: true }),\n      Bodies.rectangle(0, 300, 10, 600, { isStatic: true })\n    ])\n\n    Events.on(engine, 'collisionStart', function (event) {\n      setPopulation(population => {\n        var pairs = event.pairs\n\n        pairs.forEach(pair => {\n          const { bodyA, bodyB } = pair\n\n          const personA = population[bodyA.id]\n          const personB = population[bodyB.id]\n\n          if (R.isNil(personA) || R.isNil(personB)) return\n\n          if (personA.infected || personB.infected) {\n            bodyA.render.fillStyle = bodyB.render.fillStyle = 'red'\n            personB.infected = personA.infected = true\n          }\n        })\n\n        return population\n      })\n    })\n\n    Engine.run(engine)\n    setEngine(engine)\n  }, [setPopulation])\n\n  useInterval(() => {\n    const body = choose(engine?.world.bodies)\n    if (!body) return // we probably got called before the engine exists\n    if (body.isStatic) return // it's probably a wall\n\n    Body.applyForce(body, { x: random(0, 800), y: random(0, 600) }, { x: random(-0.0001, 0.0001), y: random(-0.0001, 0.0001) })\n  }, 100, [engine])\n\n  return (\n    <div className=\"Room\">\n      <SVGRenderer engine={engine} />\n    </div>\n  )\n}\n\nexport default Room\n","import React from 'react'\nimport Room from './Room'\n\nconst App = () => {\n  return (\n    <div className=\"World\">\n      <Room/>\n      <Room/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}