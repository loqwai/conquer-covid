{"version":3,"sources":["models/room.ts","hooks/useAnimationFrame.ts","Room.tsx","Town.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["chance","Chance","createPerson","infected","id","uuid","position","x","y","name","Room","population","size","engine","addPerson","person","body","Bodies","circle","integer","min","max","width","label","World","add","world","removePerson","R","bodies","remove","getPeople","start","Engine","run","Events","on","syncPopulationPosition","pairs","forEach","bodyA","bodyB","p1","p2","introduceEntropy","pickone","isStatic","Body","applyForce","height","floating","toData","setupEngine","create","gravity","rectangle","wallWidth","this","useAnimationFrame","fn","React","useState","f","useEffect","stop","requestAnimationFrame","animate","PersonShape","className","lengthAdjust","textLength","row","column","offsetX","offsetY","style","transform","fill","stroke","map","key","Town","columnCount","rooms","r","roomsData","setRoomsData","console","log","room","i","Math","floor","moment","Moment","sqrt","rowCount","App","unix","time","setTime","setRooms","people","roomPops","popCount","roomPop","bigness","createRooms","useInterval","t","r1","r2","tool","customToolbar","customMiniature","viewBox","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.78bbedc8.chunk.js","sourcesContent":["import { Chance } from 'chance'\nimport * as R from 'ramda'\nimport { v4 as uuid } from 'uuid'\nimport { Engine, World, Bodies, Body, Events } from 'matter-js'\n\nconst chance = new Chance()\n\nexport interface Person {\n  id: string;\n  infected: boolean;\n  position: {\n    x: number;\n    y: number;\n  }\n  name: string;\n}\n\nexport const createPerson = (): Person => ({\n  infected: false,\n  id: uuid(),\n  position: { x: 0, y: 0 },\n  name: chance.name(),\n})\n\nexport interface Population {\n  [key: string]: Person\n}\n\ninterface Point {\n  x: number\n  y: number\n}\n\ninterface Size {\n  height: number\n  width: number\n}\n\nclass Room {\n  population: Population\n  size: Size\n  engine: Engine\n\n  constructor(population: Person[], size: Size) {\n    this.size = size\n    this.engine = this.setupEngine()\n    this.population = {}\n    R.forEach(this.addPerson, population)\n    this.start()\n\n    population.forEach(this.addPerson)\n  }\n\n  addPerson = (person: Person) => {\n    const { population, engine, size } = this\n    population[person.id] = person\n    const body = Bodies.circle(\n      chance.integer({ min: 0, max: size.width }),\n      chance.integer({ min: 0, max: size.width }),\n      5,\n      { label: person.id })\n    World.add(engine.world, body)\n  }\n\n  removePerson = (id: string) => {\n    const { population, engine } = this\n    delete population[id]\n    const body = R.find(R.propEq('label', id), engine.world.bodies)\n    if (!body) return\n    World.remove(engine.world, body)\n  }\n\n  getPeople = () => {\n    return R.values(this.population)\n  }\n\n  start = () => {\n    const { engine, population } = this\n    Engine.run(engine)\n    Events.on(engine, 'afterUpdate', () => {\n      this.syncPopulationPosition()\n    })\n    Events.on(engine, 'collisionStart', ({ pairs }) => {\n      pairs.forEach(({ bodyA, bodyB }) => {\n        const p1 = population[bodyA.label]\n        const p2 = population[bodyB.label]\n        if (!p2 || !p1) return\n        p1.infected = p2.infected = (p1.infected || p2.infected)\n      })\n    })\n  }\n\n  introduceEntropy = () => {\n    const { engine, size } = this\n    const body = chance.pickone(engine.world.bodies)\n    if (!body) return // we probably got called before the engine exists\n    if (body.isStatic) return // it's probably a wall\n\n    Body.applyForce(body, {\n      x: chance.integer({ min: 0, max: size.width }),\n      y: chance.integer({ min: 0, max: size.height }),\n    }, {\n      x: chance.floating({ min: -0.0001, max: 0.0001 }),\n      y: chance.floating({ min: -0.0001, max: 0.0001 }),\n    })\n  }\n\n  toData = () => ({\n    population: this.population,\n    size: this.size\n  })\n\n  syncPopulationPosition = () => {\n    const { engine, population } = this\n    R.forEach(body => {\n      if (!body.label) return\n      const person = population[body.label]\n      if (!person) return\n      person.position = body.position\n    }, engine.world.bodies)\n  }\n\n  setupEngine = () => {\n    const { size } = this\n    const wallWidth = 1000\n    const engine = Engine.create()\n    engine.world.gravity.y = 0\n    World.add(engine.world, [\n      Bodies.rectangle(size.width / 2, 0 - wallWidth / 2, size.width, wallWidth, { isStatic: true }),\n      Bodies.rectangle(size.width + wallWidth / 2, size.height / 2, wallWidth, size.height, { isStatic: true }),\n      Bodies.rectangle(size.width / 2, size.height + wallWidth / 2, size.width, wallWidth, { isStatic: true }),\n      Bodies.rectangle(0 - wallWidth / 2, size.height / 2, wallWidth, size.height, { isStatic: true }),\n    ])\n    return engine\n  }\n}\n\nexport default Room","import React from 'react'\n\nconst useAnimationFrame = (fn: () => void) => {\n  const [f] = React.useState(() => fn)\n\n  React.useEffect(() => {\n    let stop = false\n    const animate = () => {\n      if (stop) return\n      f()\n      requestAnimationFrame(animate)\n    }\n    requestAnimationFrame(animate)\n\n    return () => { stop = true }\n  }, [f])\n}\n\nexport default useAnimationFrame","import React from 'react'\nimport * as R from 'ramda'\nimport { Population, Person } from './models/room'\n\nimport './SVGRenderer.css'\n\nconst PersonShape = ({ person }: { person: Person }) => (\n  <>\n    <text\n      className=\"person-shape-face\"\n      x={person.position.x - 5}\n      y={person.position.y + 5}\n    >{person.infected ? '🤮' : '🙂'}</text>\n    <text\n      className=\"person-shape-name\"\n      x={person.position.x - 5}\n      y={person.position.y + 10}\n      lengthAdjust=\"spacingAndGlyphs\"\n      textLength=\"10\"\n    >{person.name}</text>\n  </>\n)\n\ninterface Props {\n  row: number;\n  column: number;\n  population: Population;\n  size: {\n    height: number;\n    width: number;\n  }\n}\n\nconst Room = ({ row, column, population, size }: Props) => {\n  if (!population) return null\n\n  const maxWidth = 400\n  const maxHeight = 400\n\n  const offsetX = (maxWidth - size.width) / 2\n  const offsetY = (maxHeight - size.height) / 2\n\n  return <g style={{transform: `translate(${column * maxWidth}px, ${row * maxHeight}px)`}}>\n    <rect width={maxWidth} height={maxHeight} fill=\"transparent\" stroke=\"#cccccc\" />\n    <g style={{transform: `translate(${offsetX}px, ${offsetY}px)`}}>\n      <rect width={size.width} height={size.height} fill=\"transparent\" stroke=\"black\" />\n      {R.values(population).map(person => <PersonShape key={person.id} person={person} />)}\n    </g>\n  </g>\n}\n\nexport default Room","import React, { useEffect } from 'react'\nimport useAnimationFrame from './hooks/useAnimationFrame'\nimport Room from './models/room'\nimport RoomComponent from './Room'\n\ninterface Props {\n  columnCount: number;\n  rooms: Room[]\n}\n\nconst Town = ({columnCount, rooms}: Props) => {\n  const [roomsData, setRoomsData] = React.useState(rooms.map(r => r.toData()))\n\n  useEffect(() => {\n    console.log('Town construction')\n    return () => console.log('Town destruction')\n  }, [])\n\n  useAnimationFrame(() => {\n    setRoomsData(rooms.map(r => r.toData()))\n  })\n\n  return (\n    <>\n      {roomsData.map((room, i) => (\n        <RoomComponent key={i} {...room} row={Math.floor(i / columnCount)} column={i % columnCount} />)\n      )}\n    </>\n  )\n\n}\n\nexport default Town","import React from 'react'\nimport * as R from 'ramda'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { UncontrolledReactSVGPanZoom } from 'react-svg-pan-zoom' \nimport { Chance } from 'chance'\nimport * as Moment from 'moment'\nimport useInterval from '@use-it/interval'\nimport './App.css'\nimport Room, {createPerson} from './models/room'\nimport Town from './Town'\n\nconst moment = Moment as any\n\nconst chance = new Chance()\nconst popCount = 90\nconst roomCount = 9\nconst columnCount = Math.floor(Math.sqrt(roomCount))\nconst maxBigness = 400\n\nconst rowCount = Math.floor(roomCount / columnCount)\n\nconst createRooms = () => {\n  const people = R.times(createPerson, popCount)\n  chance.pickone(people).infected = true\n  const roomPops = R.splitEvery(popCount / roomCount, people)\n  return R.map(roomPop => {\n    const bigness = chance.integer({ min: 100, max: maxBigness })\n    return new Room(roomPop, { height: bigness, width: bigness })\n  }, roomPops)\n}\n\nconst App = () => {\n  const [time, setTime] = React.useState<number>(moment().unix())  \n  const [rooms, setRooms] = React.useState<ReturnType<typeof createRooms>>([])\n\n  React.useEffect(() => {\n    setRooms(createRooms())\n  }, [])\n\n  useInterval(() => {\n    setTime(t => moment.unix(t).add(10, 'minutes').unix())  \n  }, 1000)\n\n  useInterval(() => {\n    const r1 = chance.pickone(rooms)\n    const r2 = chance.pickone(rooms)\n\n    if (R.isEmpty(r1.getPeople())) return\n\n    const person = chance.pickone(r1.getPeople())\n    r1.removePerson(person.id)\n    r2.addPerson(person)    \n\n    rooms.forEach(r => r.introduceEntropy())   \n  }, 100)\n\n  return (\n    <div className=\"app\">\n      <AutoSizer>\n        {({width, height}) => {\n          return width && height && (\n            <UncontrolledReactSVGPanZoom \n              width={width}\n              height={height}\n              tool=\"pan\"\n              customToolbar={() => null}\n              customMiniature={() => null}\n            >\n              <svg className=\"world\" viewBox={`0 0 ${columnCount * maxBigness} ${rowCount * maxBigness}`}>\n                <Town columnCount={columnCount} rooms={rooms} />\n              </svg>\n            </UncontrolledReactSVGPanZoom>\n          )\n        }}\n      </AutoSizer>\n      <h1 className=\"time\">{moment.unix(time).format()}</h1>\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}