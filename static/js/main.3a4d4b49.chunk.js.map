{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["random","min","max","Matter","Common","choose","App","React","useState","population","setPopulation","useEffect","engine","Engine","create","circles","R","Bodies","circle","map","position","id","infected","Math","world","gravity","y","World","add","rectangle","isStatic","Events","on","event","pairs","forEach","pair","bodyA","bodyB","personA","personB","run","interval","setInterval","Body","applyForce","x","stop","requestAnimationFrame","animate","c","i","clearInterval","className","viewBox","key","cx","cy","fill","r","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAcMA,EAAS,SAACC,EAAaC,GAAd,OAAuCC,IAAeC,OAAOJ,OAAOC,EAAKC,IAClFG,EAAUF,IAAeC,OAAOC,OAqFvBC,EAnFH,WAAO,IAAD,EACoBC,IAAMC,SAAmB,IAD7C,mBACTC,EADS,KACGC,EADH,KAmEhB,OAhEAH,IAAMI,WAAU,WACd,IAAMC,EAASC,SAAOC,SAEhBC,EAAkBC,KAAQ,kBAAMC,SAAOC,OAAOlB,EAAO,EAAG,KAAMA,EAAO,EAAG,KAAM,KAAI,KACxFU,EAAcK,EAAQI,KAAI,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,GAAb,sBACrBD,EADqB,CAExBC,KACAC,SAAUC,KAAKvB,SAAW,UAG5BY,EAAOY,MAAMC,QAAQC,EAAI,EACzBC,QAAMC,IAAIhB,EAAOY,MAAOT,GAGxBY,QAAMC,IAAIhB,EAAOY,MAAO,CACtBP,SAAOY,UAAU,IAAK,EAAG,IAAK,GAAI,CAAEC,UAAU,IAC9Cb,SAAOY,UAAU,IAAK,IAAK,IAAK,GAAI,CAAEC,UAAU,IAChDb,SAAOY,UAAU,IAAK,IAAK,GAAI,IAAK,CAAEC,UAAU,IAChDb,SAAOY,UAAU,EAAG,IAAK,GAAI,IAAK,CAAEC,UAAU,MAGhDC,SAAOC,GAAGpB,EAAQ,kBAAkB,SAAUqB,GAC5CvB,GAAc,SAAAD,GAeZ,OAdYwB,EAAMC,MAEZC,SAAQ,SAAAC,GAAS,IACbC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,MAETC,EAAUvB,IAAOA,IAAS,KAAMqB,EAAMhB,IAAKZ,GAC3C+B,EAAUxB,IAAOA,IAAS,KAAMsB,EAAMjB,IAAKZ,GAE7CO,IAAQuB,IAAYvB,IAAQwB,KAEhCD,EAAQjB,SAAWiB,EAAQjB,UAAYkB,EAAQlB,SAC/CkB,EAAQlB,SAAWiB,EAAQjB,aAGtBb,QAIXI,SAAO4B,IAAI7B,GAEX,IAAM8B,EAAWC,aAAY,WAC3B,IAAMzB,EAASb,EAAOU,GACtB6B,OAAKC,WAAW3B,EAAQ,CAAE4B,EAAG9C,EAAO,EAAG,KAAM0B,EAAG1B,EAAO,EAAG,MAAQ,CAAE8C,EAAG9C,GAAQ,KAAQ,MAAS0B,EAAG1B,GAAQ,KAAQ,UAClH,KAGC+C,GAAO,EASX,OAFAC,uBANgB,SAAVC,IACJvC,GAAc,SAAAD,GAAU,OAAIM,EAAQI,KAAY,SAAC+B,EAAGC,GAAJ,sBAAgB1C,EAAW0C,GAA3B,GAAkCD,EAAE9B,gBAEhF2B,GACJC,sBAAsBC,MAIjB,WACLF,GAAO,EACPK,cAAcV,MAEf,IAGD,yBAAKW,UAAU,OACb,yBAAKC,QAAO,eACT7C,EAAWU,KAAI,gBAAG2B,EAAH,EAAGA,EAAGpB,EAAN,EAAMA,EAAGJ,EAAT,EAASA,SAAUD,EAAnB,EAAmBA,GAAnB,OACd,4BACEkC,IAAKlC,EACLmC,GAAIV,EACJW,GAAI/B,EACJgC,KAAMpC,EAAW,MAAQ,QACzBqC,EAAE,SAPR,OC1EcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3a4d4b49.chunk.js","sourcesContent":["import React from 'react'\nimport * as R from 'ramda'\nimport './App.css'\nimport { Engine, World, Bodies, Body, Events } from \"matter-js\"\nimport Matter from \"matter-js\"\n\ninterface Person {\n  x: number;\n  y: number;\n  infected: boolean;\n  id: number | undefined;\n}\n\n//don't worry about it\nconst random = (min: number, max: number): number => (Matter as any).Common.random(min, max)\nconst choose = (Matter as any).Common.choose as <T>(arg0: T[]) => T\n\nconst App = () => {\n  const [population, setPopulation] = React.useState<Person[]>([])\n\n  React.useEffect(() => {\n    const engine = Engine.create()\n\n    const circles: Body[] = R.times(() => Bodies.circle(random(0, 800), random(0, 600), 5), 1000)\n    setPopulation(circles.map(({ position, id }) => ({\n      ...position,\n      id,\n      infected: Math.random() < 0.02,\n    })))\n\n    engine.world.gravity.y = 0\n    World.add(engine.world, circles)\n\n    // walls\n    World.add(engine.world, [\n      Bodies.rectangle(400, 0, 800, 10, { isStatic: true }),\n      Bodies.rectangle(400, 600, 800, 10, { isStatic: true }),\n      Bodies.rectangle(800, 300, 10, 600, { isStatic: true }),\n      Bodies.rectangle(0, 300, 10, 600, { isStatic: true })\n    ])\n\n    Events.on(engine, 'collisionStart', function (event) {\n      setPopulation(population => {\n        var pairs = event.pairs\n\n        pairs.forEach(pair => {\n          const { bodyA, bodyB } = pair\n\n          const personA = R.find(R.propEq('id', bodyA.id), population)\n          const personB = R.find(R.propEq('id', bodyB.id), population)\n\n          if (R.isNil(personA) || R.isNil(personB)) return;\n\n          personA.infected = personA.infected || personB.infected\n          personB.infected = personA.infected\n        })\n\n        return population\n      })\n    })\n\n    Engine.run(engine)\n\n    const interval = setInterval(() => {\n      const circle = choose(circles)\n      Body.applyForce(circle, { x: random(0, 800), y: random(0, 600) }, { x: random(-0.0001, 0.0001), y: random(-0.0001, 0.0001) })\n    }, 100)\n\n\n    let stop = false\n    const animate = () => {\n      setPopulation(population => circles.map<Person>((c, i) => ({ ...population[i], ...c.position })))\n\n      if (stop) return\n      requestAnimationFrame(animate)\n    }\n    requestAnimationFrame(animate)\n\n    return () => {\n      stop = true\n      clearInterval(interval)\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <svg viewBox={`0 0 800 600`}>\n        {population.map(({ x, y, infected, id }) => (\n          <circle\n            key={id}\n            cx={x}\n            cy={y}\n            fill={infected ? 'red' : 'green'}\n            r=\"5\" />\n        ))}l\n      </svg>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}