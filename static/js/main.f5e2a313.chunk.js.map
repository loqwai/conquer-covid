{"version":3,"sources":["hooks/useAnimationFrame.ts","Room.tsx","RoomsGrid.tsx","models/room.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useAnimationFrame","fn","React","useState","f","useEffect","stop","requestAnimationFrame","animate","PersonShape","person","className","x","position","y","infected","lengthAdjust","textLength","name","Room","row","column","population","size","offsetX","width","offsetY","height","style","transform","fill","stroke","R","map","key","id","Town","columnCount","rooms","r","toData","roomsData","setRoomsData","room","i","Math","floor","chance","Chance","createPerson","uuid","engine","addPerson","body","Bodies","circle","integer","min","max","label","World","add","world","removePerson","bodies","remove","getPeople","start","Engine","run","Events","on","syncPopulationPosition","pairs","forEach","bodyA","bodyB","p1","p2","introduceEntropy","pickone","isStatic","Body","applyForce","floating","setupEngine","create","gravity","rectangle","wallWidth","this","Game","time","deltaSinceLastMove","moveOneRandomPerson","r1","r2","wiggleThePeople","people","popCount","roomPops","roomCount","roomPop","bigness","maxBigness","createRooms","delta","sqrt","rowCount","App","frame","setFrame","setDelta","undefined","game","setGame","requestRef","useRef","previousTimeRef","current","t","cancelAnimationFrame","step","tool","customToolbar","customMiniature","viewBox","RoomsGrid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5e2a313.chunk.js","sourcesContent":["import React from 'react'\n\nconst useAnimationFrame = (fn: () => void) => {\n  const [f] = React.useState(() => fn)\n\n  React.useEffect(() => {\n    let stop = false\n    const animate = () => {\n      if (stop) return\n      f()\n      requestAnimationFrame(animate)\n    }\n    requestAnimationFrame(animate)\n\n    return () => { stop = true }\n  }, [f])\n}\n\nexport default useAnimationFrame","import React from 'react'\nimport * as R from 'ramda'\nimport { Population, Person } from './models/room'\n\nimport './SVGRenderer.css'\n\nconst PersonShape = ({ person }: { person: Person }) => (\n  <>\n    <text\n      className=\"person-shape-face\"\n      x={person.position.x - 5}\n      y={person.position.y + 5}\n    >{person.infected ? 'ðŸ¤®' : 'ðŸ™‚'}</text>\n    <text\n      className=\"person-shape-name\"\n      x={person.position.x - 5}\n      y={person.position.y + 10}\n      lengthAdjust=\"spacingAndGlyphs\"\n      textLength=\"10\"\n    >{person.name}</text>\n  </>\n)\n\ninterface Props {\n  row: number;\n  column: number;\n  population: Population;\n  size: {\n    height: number;\n    width: number;\n  }\n}\n\nconst Room = ({ row, column, population, size }: Props) => {\n  if (!population) return null\n\n  const maxWidth = 400\n  const maxHeight = 400\n\n  const offsetX = (maxWidth - size.width) / 2\n  const offsetY = (maxHeight - size.height) / 2\n\n  return <g style={{transform: `translate(${column * maxWidth}px, ${row * maxHeight}px)`}}>\n    <rect width={maxWidth} height={maxHeight} fill=\"transparent\" stroke=\"#cccccc\" />\n    <g style={{transform: `translate(${offsetX}px, ${offsetY}px)`}}>\n      <rect width={size.width} height={size.height} fill=\"transparent\" stroke=\"black\" />\n      {R.values(population).map(person => <PersonShape key={person.id} person={person} />)}\n    </g>\n  </g>\n}\n\nexport default Room","import React from 'react'\nimport useAnimationFrame from './hooks/useAnimationFrame'\nimport Room from './models/room'\nimport RoomComponent from './Room'\n\ninterface Props {\n  columnCount: number;\n  rooms: Room[] | undefined\n}\n\nconst Town = ({columnCount, rooms}: Props) => {\n  const [roomsData, setRoomsData] = React.useState(rooms?.map(r => r.toData()))\n\n  useAnimationFrame(() => {\n    setRoomsData(rooms?.map(r => r.toData()))\n  })\n\n  return (\n    <>\n      {roomsData?.map((room, i) => (\n        <RoomComponent key={i} {...room} row={Math.floor(i / columnCount)} column={i % columnCount} />)\n      )}\n    </>\n  )\n\n}\n\nexport default Town","import { Chance } from 'chance'\nimport * as R from 'ramda'\nimport { v4 as uuid } from 'uuid'\nimport { Engine, World, Bodies, Body, Events } from 'matter-js'\n\nconst chance = new Chance()\n\nexport interface Person {\n  id: string;\n  infected: boolean;\n  position: {\n    x: number;\n    y: number;\n  }\n  name: string;\n}\n\nexport const createPerson = (): Person => ({\n  infected: false,\n  id: uuid(),\n  position: { x: 0, y: 0 },\n  name: chance.name(),\n})\n\nexport interface Population {\n  [key: string]: Person\n}\n\nexport interface Point {\n  x: number\n  y: number\n}\n\ninterface Size {\n  height: number\n  width: number\n}\n\nclass Room {\n  population: Population\n  size: Size\n  engine: Engine\n\n  constructor(population: Person[], size: Size) {\n    this.size = size\n    this.engine = this.setupEngine()\n    this.population = {}\n    R.forEach(this.addPerson, population)\n    this.start()\n\n    population.forEach(this.addPerson)\n  }\n\n  addPerson = (person: Person) => {\n    const { population, engine, size } = this\n    population[person.id] = person\n    const body = Bodies.circle(\n      chance.integer({ min: 0, max: size.width }),\n      chance.integer({ min: 0, max: size.width }),\n      5,\n      { label: person.id })\n    World.add(engine.world, body)\n  }\n\n  removePerson = (id: string) => {\n    const { population, engine } = this\n    delete population[id]\n    const body = R.find(R.propEq('label', id), engine.world.bodies)\n    if (!body) return\n    World.remove(engine.world, body)\n  }\n\n  getPeople = () => {\n    return R.values(this.population)\n  }\n\n  start = () => {\n    const { engine, population } = this\n    Engine.run(engine)\n    Events.on(engine, 'afterUpdate', () => {\n      this.syncPopulationPosition()\n    })\n    Events.on(engine, 'collisionStart', ({ pairs }) => {\n      pairs.forEach(({ bodyA, bodyB }) => {\n        const p1 = population[bodyA.label]\n        const p2 = population[bodyB.label]\n        if (!p2 || !p1) return\n        p1.infected = p2.infected = (p1.infected || p2.infected)\n      })\n    })\n  }\n\n  introduceEntropy = () => {\n    const { engine, size } = this\n    const body = chance.pickone(engine.world.bodies)\n    if (!body) return // we probably got called before the engine exists\n    if (body.isStatic) return // it's probably a wall\n\n    Body.applyForce(body, {\n      x: chance.integer({ min: 0, max: size.width }),\n      y: chance.integer({ min: 0, max: size.height }),\n    }, {\n      x: chance.floating({ min: -0.0001, max: 0.0001 }),\n      y: chance.floating({ min: -0.0001, max: 0.0001 }),\n    })\n  }\n\n  toData = () => ({\n    population: this.population,\n    size: this.size\n  })\n\n  syncPopulationPosition = () => {\n    const { engine, population } = this\n    R.forEach(body => {\n      if (!body.label) return\n      const person = population[body.label]\n      if (!person) return\n      person.position = body.position\n    }, engine.world.bodies)\n  }\n\n  setupEngine = () => {\n    const { size } = this\n    const wallWidth = 1000\n    const engine = Engine.create()\n    engine.world.gravity.y = 0\n    World.add(engine.world, [\n      Bodies.rectangle(size.width / 2, 0 - wallWidth / 2, size.width, wallWidth, { isStatic: true }),\n      Bodies.rectangle(size.width + wallWidth / 2, size.height / 2, wallWidth, size.height, { isStatic: true }),\n      Bodies.rectangle(size.width / 2, size.height + wallWidth / 2, size.width, wallWidth, { isStatic: true }),\n      Bodies.rectangle(0 - wallWidth / 2, size.height / 2, wallWidth, size.height, { isStatic: true }),\n    ])\n    return engine\n  }\n}\n\nexport default Room","import * as R from 'ramda'\nimport { Chance } from 'chance'\n\nimport Room, { createPerson } from '../models/room'\n\nconst chance = new Chance()\n\nconst createRooms = () => {\n  const people = R.times(createPerson, Game.popCount)\n  chance.pickone(people).infected = true\n  const roomPops = R.splitEvery(Game.popCount / Game.roomCount, people)\n  return R.map(roomPop => {\n    const bigness = chance.integer({ min: 100, max: Game.maxBigness })\n    return new Room(roomPop, { height: bigness, width: bigness })\n  }, roomPops)\n}\n\nexport default class Game {\n    static popCount = 90;\n    static roomCount = 9\n    static columnCount = Math.floor(Math.sqrt(Game.roomCount))\n    static rowCount = Math.floor(Game.roomCount / Game.columnCount)\n    static maxBigness = 400\n\n    rooms: ReturnType<typeof createRooms>\n    time = 0\n    deltaSinceLastMove = 0\n\n    constructor() {\n        this.rooms = createRooms()\n    }\n\n    step(delta: number) {\n      this.deltaSinceLastMove += delta\n\n      if (this.deltaSinceLastMove < 100) return\n\n      this.moveOneRandomPerson()\n      this.wiggleThePeople()\n      this.deltaSinceLastMove = 0\n    }\n\n    moveOneRandomPerson = () => {\n        const r1 = chance.pickone(this.rooms)\n        const r2 = chance.pickone(this.rooms)\n\n        if (R.isEmpty(r1.getPeople())) return\n\n        const person = chance.pickone(r1.getPeople())\n        r1.removePerson(person.id)\n        r2.addPerson(person)\n    }\n\n    wiggleThePeople = () => {\n        this.rooms.forEach(r => r.introduceEntropy())\n    }\n\n}\n\n","import React from 'react'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { UncontrolledReactSVGPanZoom } from 'react-svg-pan-zoom'\nimport './App.css'\nimport RoomsGrid from './RoomsGrid'\nimport Game from './ecs/Game'\n\n\nconst App = () => {\n  const [frame, setFrame] = React.useState(0)\n  const [delta, setDelta] = React.useState<number>(0)\n  const [game, setGame] = React.useState<Game | undefined>(undefined)\n  const requestRef = React.useRef(0)\n  const previousTimeRef = React.useRef(0)\n\n  React.useEffect(() => {\n    setGame(new Game())\n  }, [])\n\n  // animation loop\n  React.useEffect(() => {\n    const animate = (t: number) => {\n      const delta = t - previousTimeRef.current\n      previousTimeRef.current = t\n      setDelta(delta)\n      setFrame(f => f + 1)\n      requestRef.current = requestAnimationFrame(animate)\n    }\n\n    requestRef.current = requestAnimationFrame(animate)\n    return () => cancelAnimationFrame(requestRef.current)\n  }, [])\n\n  React.useEffect(() => {\n    if(frame % 10 === 0) {\n      game?.step(delta)\n    }\n  }, [game, frame, delta])\n\n  return (\n    <div className=\"app\">\n      <AutoSizer>\n        {({width, height}) => {\n          return width && height && (\n            <UncontrolledReactSVGPanZoom\n              width={width}\n              height={height}\n              tool=\"pan\"\n              customToolbar={() => null}\n              customMiniature={() => null}\n            >\n              <svg className=\"world\" viewBox={`0 0 ${Game.columnCount * Game.maxBigness} ${Game.rowCount * Game.maxBigness}`}>\n                <RoomsGrid columnCount={Game.columnCount} rooms={game?.rooms} />\n              </svg>\n            </UncontrolledReactSVGPanZoom>\n          )\n        }}\n      </AutoSizer>\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}