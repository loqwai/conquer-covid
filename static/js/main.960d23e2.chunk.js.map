{"version":3,"sources":["models/room.ts","hooks/useInterval.ts","SVGRenderer.tsx","Town.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["chance","Chance","createPerson","infected","id","uuid","position","x","y","name","Room","population","size","engine","addPerson","person","body","Bodies","circle","integer","min","max","width","label","World","add","world","removePerson","R","bodies","remove","getPeople","start","Engine","run","Events","on","syncPopulationPosition","pairs","forEach","bodyA","bodyB","p1","p2","introduceEntropy","pickone","isStatic","Body","applyForce","height","floating","setupEngine","create","gravity","rectangle","wallWidth","this","useInterval","fn","milliseconds","deps","React","useEffect","interval","setInterval","clearInterval","PersonShape","className","lengthAdjust","textLength","SVGRenderer","setRenderCount","useState","stop","requestAnimationFrame","animate","i","viewBox","style","map","key","Town","rooms","room","moment","Moment","App","unix","time","setTime","setRooms","people","roomPops","popCount","roomPop","bigness","r1","r2","r","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.960d23e2.chunk.js","sourcesContent":["import { Chance } from 'chance'\nimport * as R from 'ramda'\nimport { v4 as uuid } from 'uuid'\nimport { Engine, World, Bodies, Body, Events } from 'matter-js'\n\nconst chance = new Chance()\n\nexport interface Person {\n  id: string;\n  infected: boolean;\n  position: {\n    x: number;\n    y: number;\n  }\n  name: string;\n}\n\nexport const createPerson = (): Person => ({\n  infected: false,\n  id: uuid(),\n  position: { x: 0, y: 0 },\n  name: chance.name(),\n})\n\nexport interface Population {\n  [key: string]: Person\n}\n\ninterface Point {\n  x: number\n  y: number\n}\n\ninterface Size {\n  height: number\n  width: number\n}\n\nclass Room {\n  population: Population\n  size: Size\n  engine: Engine\n\n  constructor(population: Person[], size: Size) {\n    this.size = size\n    this.engine = this.setupEngine()\n    this.population = {}\n    R.forEach(this.addPerson, population)\n    this.start()\n\n    population.forEach(this.addPerson)\n  }\n\n  addPerson = (person: Person) => {\n    const { population, engine, size } = this\n    population[person.id] = person\n    const body = Bodies.circle(\n      chance.integer({ min: 0, max: size.width }),\n      chance.integer({ min: 0, max: size.width }),\n      5,\n      { label: person.id })\n    World.add(engine.world, body)\n  }\n\n  removePerson = (id: string) => {\n    const { population, engine } = this\n    delete population[id]\n    const body = R.find(R.propEq('label', id), engine.world.bodies)\n    if (!body) return;\n    World.remove(engine.world, body)\n  }\n\n  getPeople = () => {\n    return R.values(this.population)\n  }\n\n  start = () => {\n    const { engine, population } = this\n    Engine.run(engine)\n    Events.on(engine, 'afterUpdate', () => {\n      this.syncPopulationPosition()\n    })\n    Events.on(engine, 'collisionStart', ({ pairs }) => {\n      pairs.forEach(({ bodyA, bodyB }) => {\n        const p1 = population[bodyA.label]\n        const p2 = population[bodyB.label]\n        if (!p2 || !p1) return;\n        p1.infected = p2.infected = (p1.infected || p2.infected)\n      })\n    })\n  }\n\n  introduceEntropy = () => {\n    const { engine, size } = this\n    const body = chance.pickone(engine.world.bodies)\n    if (!body) return // we probably got called before the engine exists\n    if (body.isStatic) return // it's probably a wall\n\n    Body.applyForce(body, {\n      x: chance.integer({ min: 0, max: size.width }),\n      y: chance.integer({ min: 0, max: size.height }),\n    }, {\n      x: chance.floating({ min: -0.0001, max: 0.0001 }),\n      y: chance.floating({ min: -0.0001, max: 0.0001 }),\n    })\n  }\n\n  syncPopulationPosition = () => {\n    const { engine, population } = this\n    R.forEach(body => {\n      if (!body.label) return;\n      const person = population[body.label]\n      if (!person) return\n      person.position = body.position\n    }, engine.world.bodies)\n  }\n\n  setupEngine = () => {\n    const { size } = this\n    const wallWidth = 1000\n    const engine = Engine.create()\n    engine.world.gravity.y = 0\n    World.add(engine.world, [\n      Bodies.rectangle(size.width / 2, 0 - wallWidth / 2, size.width, wallWidth, { isStatic: true }),\n      Bodies.rectangle(size.width + wallWidth / 2, size.height / 2, wallWidth, size.height, { isStatic: true }),\n      Bodies.rectangle(size.width / 2, size.height + wallWidth / 2, size.width, wallWidth, { isStatic: true }),\n      Bodies.rectangle(0 - wallWidth / 2, size.height / 2, wallWidth, size.height, { isStatic: true }),\n    ])\n    return engine\n  }\n}\n\nexport default Room","import React from 'react'\n\ntype Fn = () => any;\n\nconst useInterval = (fn: Fn | undefined, milliseconds: number, deps: any[] = []) => {\n  React.useEffect(() => {\n    if (!fn) return;\n    const interval = setInterval(fn, milliseconds)\n    return () => clearInterval(interval)\n    // eslint-disable-next-line\n  }, [fn, milliseconds, ...deps])\n}\n\nexport default useInterval","import React from 'react'\nimport * as R from 'ramda'\nimport { Population, Person } from './models/room'\n\nimport './SVGRenderer.css'\n\nconst PersonShape = ({ person }: { person: Person }) => (\n  <>\n    <text\n      className=\"person-shape-face\"\n      x={person.position.x - 5}\n      y={person.position.y + 5}\n    >{person.infected ? 'ğŸ¤®' : 'ğŸ™‚'}</text>\n    <text\n      className=\"person-shape-name\"\n      x={person.position.x - 5}\n      y={person.position.y + 10}\n      lengthAdjust=\"spacingAndGlyphs\"\n      textLength=\"10\"\n    >{person.name}</text>\n  </>\n)\n\ninterface Props {\n  population: Population;\n  size: {\n    height: number;\n    width: number;\n  }\n}\n\nconst SVGRenderer = ({ population, size }: Props) => {\n  const setRenderCount = React.useState(0)[1]\n\n  React.useEffect(() => {\n    let stop = false\n    const animate = () => {\n      if (stop) return\n\n      setRenderCount(i => i + 1) // rerender\n      requestAnimationFrame(animate)\n    }\n    requestAnimationFrame(animate)\n\n    return () => { stop = true }\n  }, [setRenderCount])\n\n  if (!population) return null\n\n  return <svg viewBox={`0 0 ${size.width} ${size.height}`} style={size}>\n    {R.values(population).map(person => <PersonShape key={person.id} person={person} />)}\n  </svg>\n}\n\nexport default SVGRenderer","import React from 'react'\n\nimport Room from './models/room'\nimport SVGRenderer from './SVGRenderer'\n\ninterface Props {\n    rooms : Room[]    \n}\n\nconst Town = ({ rooms }: Props) => {\n    return (<div className=\"World\">\n        {rooms.map((room, i) => <SVGRenderer key={i} {...room} />)}\n    </div>)\n}\n\nexport default Town\n","import React from 'react'\nimport * as R from 'ramda'\nimport { Chance } from 'chance'\nimport * as Moment from 'moment'\nimport './App.css'\nimport Room, {createPerson} from './models/room'\n// import {createPerson } from './models/room'\nimport useInterval from './hooks/useInterval'\nimport Town from './Town'\n\nconst chance = new Chance()\nconst moment = (Moment as any)\nconst popCount = 100\nconst roomCount = 20\n\nconst App = () => {  \n  const [time, setTime] = React.useState(moment().unix())  \n  const [rooms, setRooms] = React.useState<Room[]>([])\n  \n  React.useEffect(() => {\n    const people = R.times(createPerson, popCount)\n    chance.pickone(people).infected = true\n\n    const roomPops = R.splitEvery(popCount / roomCount, people)\n    const rooms = R.map(roomPop => {\n      const bigness = chance.integer({ min: 100, max: 400 })\n      return new Room(roomPop, { height: bigness, width: bigness })\n    }, roomPops)\n\n    setRooms(rooms)\n  }, [])\n\n  \n  useInterval(() => {\n    const r1 = chance.pickone(rooms)\n    const r2 = chance.pickone(rooms)\n\n    if (R.isEmpty(r1.getPeople())) return;\n    const person = chance.pickone(r1.getPeople())\n    r1.removePerson(person.id)\n    r2.addPerson(person)    \n\n    rooms.forEach(r => r.introduceEntropy())\n    setTime(moment.unix(time).add(1, 'hours').unix())  \n  }, 100)\n\n  return (\n    <>\n      <h1>{moment.unix(time).format()}</h1>\n      <Town rooms={rooms} />    \n    </>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}